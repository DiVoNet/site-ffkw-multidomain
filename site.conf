{
  -- Used for generated hostnames, e.g. freifunk-abcdef123456. (optional)
  hostname_prefix = 'DiVoNet-',

  -- Name of the community.
  site_name = 'Digital Volunteer Network',

  -- Shorthand of the community.
  site_code = 'DiVoNet',

  default_domain = 'divonet',

  -- Timezone of your community.
  -- See http://wiki.openwrt.org/doc/uci/system#time_zones
  timezone = 'CET-1CEST,M3.5.0,M10.5.0/3',


  -- List of NTP servers in your community.
  -- Must be reachable using IPv6!
  ntp_servers = {
                'fdd3:5d20:b5dd:fe00::1',
                'fdd3:5d20:b5dd:fe00::2',
                'fdd3:5d20:b5dd:fe00::3',
        },

  -- Wireless regulatory domain of your community.
  regdom = 'DE',

  autoupdater = {
    -- Default branch. Don't forget to set GLUON_BRANCH when building!
    branch = 'stable',

    -- List of branches. You may define multiple branches.
    branches = {

      -- Normal Branches

      stable = {
        name = 'stable',

        -- List of mirrors to fetch images from. IPv6 required!
        mirrors = {
                'http://autoupdate.divonet.de/stable/wireguard/sysupgrade',
        },

        -- Number of good signatures required.
        -- Have multiple maintainers sign your build and only
        -- accept it when a sufficient number of them have
        -- signed it.
        good_signatures = 1,

        -- List of public keys of maintainers.
        pubkeys = {
                'b35dfb30ab9f54064209d9cb6042d6509cdfdd19352798ef6c3fd61787d4008f', -- JohnnyBee
                '7b6989901962d8a4c4db392facb80271ae545120929d7d23daf2c66c736e5159', -- FatherJenkins
        },
      },

      testbranch = {
        name = 'testbranch',

        -- List of mirrors to fetch images from. IPv6 required!
        mirrors = {
                'http://autoupdate.divonet.de/testbranch/wireguard/sysupgrade',
        },

        -- Number of good signatures required.
        -- Have multiple maintainers sign your build and only
        -- accept it when a sufficient number of them have
        -- signed it.
        good_signatures = 1,

        -- List of public keys of maintainers.
        pubkeys = {
                'b35dfb30ab9f54064209d9cb6042d6509cdfdd19352798ef6c3fd61787d4008f', -- JohnnyBee
                '7b6989901962d8a4c4db392facb80271ae545120929d7d23daf2c66c736e5159', -- FatherJenkins
        },
      },

      devbranch = {
        name = 'devbranch',

        -- List of mirrors to fetch images from. IPv6 required!
        mirrors = {
                'http://autoupdate.divonet.de/devbranch/wireguard/sysupgrade',
        },

        -- Number of good signatures required.
        -- Have multiple maintainers sign your build and only
        -- accept it when a sufficient number of them have
        -- signed it.
        good_signatures = 1,

        -- List of public keys of maintainers.
        pubkeys = {
                'b35dfb30ab9f54064209d9cb6042d6509cdfdd19352798ef6c3fd61787d4008f', -- JohnnyBee
                '7b6989901962d8a4c4db392facb80271ae545120929d7d23daf2c66c736e5159', -- FatherJenkins
        },
      },

      -- Branches for Remote Maintainance

      stableremote = {
        name = 'stable-remote',

        -- List of mirrors to fetch images from. IPv6 required!
        mirrors = {
                'http://autoupdate.divonet.de/stable-remote/wireguard/sysupgrade',
        },

        -- Number of good signatures required.
        -- Have multiple maintainers sign your build and only
        -- accept it when a sufficient number of them have
        -- signed it.
        good_signatures = 1,

        -- List of public keys of maintainers.
        pubkeys = {
                'b35dfb30ab9f54064209d9cb6042d6509cdfdd19352798ef6c3fd61787d4008f', -- JohnnyBee
                '7b6989901962d8a4c4db392facb80271ae545120929d7d23daf2c66c736e5159', -- FatherJenkins
        },
      },

      testremote = {
        name = 'testbranch-remote',

        -- List of mirrors to fetch images from. IPv6 required!
        mirrors = {
                'http://autoupdate.divonet.de/testbranch-remote/wireguard/sysupgrade',
        },

        -- Number of good signatures required.
        -- Have multiple maintainers sign your build and only
        -- accept it when a sufficient number of them have
        -- signed it.
        good_signatures = 1,

        -- List of public keys of maintainers.
        pubkeys = {
                'b35dfb30ab9f54064209d9cb6042d6509cdfdd19352798ef6c3fd61787d4008f', -- JohnnyBee
                '7b6989901962d8a4c4db392facb80271ae545120929d7d23daf2c66c736e5159', -- FatherJenkins
        },
      },

      devremote = {
        name = 'devbranch-remote',

        -- List of mirrors to fetch images from. IPv6 required!
        mirrors = {
                'http://autoupdate.divonet.de/devbranch-remote/wireguard/sysupgrade',
        },

        -- Number of good signatures required.
        -- Have multiple maintainers sign your build and only
        -- accept it when a sufficient number of them have
        -- signed it.
        good_signatures = 1,

        -- List of public keys of maintainers.
        pubkeys = {
                'b35dfb30ab9f54064209d9cb6042d6509cdfdd19352798ef6c3fd61787d4008f', -- JohnnyBee
                '7b6989901962d8a4c4db392facb80271ae545120929d7d23daf2c66c736e5159', -- FatherJenkins
        },
      },

    },
  },

  -- The Next Line is an Insertion Point detected by a Perl Script
  -- to automatically Insert Public Keys for remote maintainance

  -- REMOTE KEY MARKER --

--  authorized_keys = {
--                '',
--        },

  opkg = {
        extra = {
                modules = 'http://autoupdate.divonet.de/stable/wireguard/modules/gluon-ffkbu-%GR/%S',
                },
  },

-- Skip setup mode (config mode) on first boot
  setup_mode = {
    skip = false,
  },
  config_mode = {
    hostname = {
      optional = false,
      prefill = true,
    },
    geo_location = {
      osm = {
        center = {
          lat = 50.680035738,
          lon = 7.191925049,
        },
        zoom = 13,
      },
    },
    remote_login = {
      show_password_form = true,
      min_password_length = 8,
    },
    owner = {
      obligatory = true,
    },
  },
}
